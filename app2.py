# -*- coding: utf-8 -*-
"""
Created on Mon Jan  6 09:50:25 2025

@author: jperezr
"""


import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import time
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor


# Configuraci√≥n de la p√°gina
st.set_page_config(page_title="Tablero Multiusuario", layout="wide")

# Estilo de fondo
page_bg_img = """
<style>
[data-testid="stAppViewContainer"]{
background:
radial-gradient(black 15%, transparent 16%) 0 0,
radial-gradient(black 15%, transparent 16%) 8px 8px,
radial-gradient(rgba(255,255,255,.1) 15%, transparent 20%) 0 1px,
radial-gradient(rgba(255,255,255,.1) 15%, transparent 20%) 8px 9px;
background-color:#282828;
background-size:16px 16px;
</style>
"""

st.markdown(page_bg_img, unsafe_allow_html=True)


# Funci√≥n para generar datos din√°micos para cada usuario
def generate_user_data(role):
    if role == "Director":
        return {
            "Producci√≥n Diaria": np.random.randint(100, 200),
            "Ingresos Totales": np.random.randint(500, 1000),
            "Rentabilidad (%)": np.random.randint(20, 50),
            "Eficiencia Operativa (%)": np.random.randint(80, 95),
        }
    elif role == "Analista":
        return {
            "An√°lisis Completados": np.random.randint(10, 30),
            "Errores Detectados": np.random.randint(0, 10),
            "Tiempo Promedio (min)": np.random.uniform(5, 15),
            "Tasa de Precisi√≥n (%)": np.random.randint(85, 99),
        }

# Funci√≥n para aplicar el modelo de predicci√≥n
def predict_data(current_data, model_type="Linear Regression"):
    # Convertimos los datos actuales en un formato adecuado para la regresi√≥n
    x = np.array(list(range(len(current_data)))).reshape(-1, 1)
    y = np.array(list(current_data.values())).reshape(-1, 1)

    # Elegir el modelo de predicci√≥n
    if model_type == "Random Forest":
        model = RandomForestRegressor(n_estimators=100)
    else:
        model = LinearRegression()

    model.fit(x, y)

    # Predicci√≥n para el siguiente valor
    future_value = model.predict(np.array([[len(current_data)]]))
    
    # Devolver solo el valor escalar predicho
    return future_value[0]  # Ya es un valor escalar, no necesita m√°s indexaci√≥n

# Layout principal
st.title("üíº Tablero Multiusuario Din√°mico con Predicciones")
st.markdown("Este tablero muestra datos personalizados y proyecciones para diferentes roles, todo actualizado en tiempo real.")

# Sidebar con opciones para el usuario
st.sidebar.title("‚öôÔ∏è Configuraci√≥n")
selected_role = st.sidebar.selectbox("Selecciona tu Rol", ["Director", "Analista"])

# Agregar un selector para elegir qu√© par√°metro mostrar en el sidebar
selected_parameter = st.sidebar.selectbox(
    "Selecciona un par√°metro para mostrar",
    ["Producci√≥n Diaria", "Ingresos Totales", "Rentabilidad (%)", "Eficiencia Operativa (%)"] if selected_role == "Director" else ["An√°lisis Completados", "Errores Detectados", "Tiempo Promedio (min)", "Tasa de Precisi√≥n (%)"]
)

# Agregar un selector para elegir el modelo de predicci√≥n
model_type = st.sidebar.selectbox("Selecciona el Modelo de Predicci√≥n", ["Linear Regression", "Random Forest"])

# Agregar la secci√≥n de ayuda en el sidebar
st.sidebar.markdown("### üõ†Ô∏è Ayuda")
st.sidebar.markdown("""
    Este tablero muestra indicadores clave para diferentes roles, como Director y Analista, con proyecciones de los pr√≥ximos valores.
    
    ### Funcionalidad:
    - **Director:** Puede visualizar indicadores de producci√≥n, ingresos, rentabilidad y eficiencia operativa.
    - **Analista:** Puede ver estad√≠sticas relacionadas con an√°lisis completados, errores detectados, tiempo promedio y tasa de precisi√≥n.
    
    ### ¬øC√≥mo interactuar?
    - Selecciona tu rol en la barra lateral para ver los indicadores correspondientes.
    - Elige un par√°metro espec√≠fico para visualizar y ver su valor actual.
    - Los indicadores se actualizan en tiempo real con predicciones basadas en modelos de regresi√≥n.
    
    ### Visualizaciones:
    - Los datos din√°micos son mostrados en un gr√°fico de barras, mostrando los indicadores actuales y las proyecciones futuras.

    # Agregar tu nombre en la parte inferior del sidebar
    st.sidebar.markdown("Creado por: Javier Horacio P√©rez Ric√°rdez", unsafe_allow_html=True)
    
""")

# Contenedores para mantener actualizaciones en el mismo lugar
kpi_container = st.empty()
dataframe_container = st.empty()
chart_container = st.empty()

# Sidebar para mostrar KPIs din√°micos en una sola fila
sidebar_kpi_container = st.sidebar.empty()

while True:
    # Generar y actualizar datos din√°micos
    user_data = generate_user_data(selected_role)
    predicted_value = predict_data(user_data, model_type)

    # Actualizar los KPIs en el sidebar din√°micamente
    with sidebar_kpi_container.container():
        st.subheader(f"üìä KPIs para {selected_role}")
        sidebar_kpi_cols = st.columns(len(user_data))
        for i, (key, value) in enumerate(user_data.items()):
            sidebar_kpi_cols[i].metric(label=key, value=f"{value:.2f}" if isinstance(value, float) else value)

        # Mostrar solo el par√°metro seleccionado en el sidebar
        st.subheader(f"üìä {selected_parameter} para {selected_role}")
        st.write(f"El valor actual de {selected_parameter} es: {user_data[selected_parameter]:.2f}")

    # Actualizar el DataFrame
    data_df = pd.DataFrame([user_data])
    data_df['Predicci√≥n del siguiente valor'] = predicted_value
    with dataframe_container:
        st.subheader("üìã Datos Din√°micos y Predicci√≥n")
        st.dataframe(data_df, use_container_width=True)

    # Actualizar el gr√°fico din√°mico
    with chart_container:
        st.subheader("üìà Evoluci√≥n de Indicadores y Proyecci√≥n Futura")
        fig = px.bar(
            x=list(user_data.keys()) + ["Pr√≥ximo valor"],
            y=list(user_data.values()) + [predicted_value],
            labels={"x": "Indicador", "y": "Valor"},
            title=f"Indicadores y Proyecci√≥n para {selected_role}",
        )
        
        # A√±adir un key √∫nico usando el rol y el timestamp actual
        st.plotly_chart(fig, use_container_width=True, key=f"bar_chart_{selected_role}_{time.time()}")

    time.sleep(2)




